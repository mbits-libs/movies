// Copyright (c) 2023 midnightBITS
// This code is licensed under MIT license (see LICENSE for details)

// THIS FILE IS AUTOGENERATED. DO NOT MODIFY

#include <movies/movie_info.hpp>
#include <py3/converter.hpp>
#include <boost/python/self.hpp>
#include <boost/python/operators.hpp>

namespace movies::v{{version}} {
	json::node simpler(json::node simpler, int level = 2);
{{#interfaces}}
{{^synthetic}}
{{#has_to_string}}
	std::string internal__{{name}}__to_string({{name}} const&);
{{/has_to_string}}
	{{name}} internal__{{name}}__clone({{name}} const&);
{{/synthetic}}
{{#operations}}
{{#external}}
	{{alias}} {{#needs_proxy}}proxy__{{/needs_proxy}}{{#staticmethod}}static__{{/staticmethod}}{{interfaces.name}}__{{name}}({{\}}
{{#arguments}}{{\}}
{{#this}}{{interfaces.name}}{{^ext_attrs.mutable}} const{{/ext_attrs.mutable}}&{{/this}}{{\}}
{{^this}}{{alias}}{{/this}} {{name}}{{^last}}, {{/last}}{{/arguments}}{{\}}
	);
{{/external}}
{{/operations}}
{{/interfaces}}
{{#interfaces}}
{{^synthetic}}
{{#has_to_string}}

	std::ostream& operator<<(std::ostream& output, {{name}} const& value) {
		auto const string = internal__{{name}}__to_string(value);
		return output << string;
	}
{{/has_to_string}}
{{/synthetic}}
{{/interfaces}}
{{#interfaces}}
{{^synthetic}}
{{#attributes}}
{{/attributes}}
{{/synthetic}}
{{/interfaces}}

	void setup_api() {
		using namespace boost::python;
		using self_ns::self;
		using self_ns::str;
{{#enums}}

		enum_<{{name}}>("{{name}}")
#define X_VALUE(NAME) .value(#NAME, {{name}}::NAME)
		    {{NAME}}_X(X_VALUE)
#undef X_VALUE
		    ;
		converter::slot_optional_rvalue_from_python<{{name}}>{};
{{/enums}}
{{#interfaces}}
{{^synthetic}}

		class_<{{name}}{{#inheritance}}, bases<{{inheritance}}>{{/inheritance}}>("{{name}}")
{{#attributes}}
{{#property}}
			.add_property("{{name}}", make_getter(&{{interfaces.name}}::{{name}}))
{{/property}}
{{^property}}
		    .def_readwrite("{{name}}", &{{interfaces.name}}::{{name}})
{{/property}}
{{/attributes}}
{{#operations}}
		    .def("{{name}}", {{\}}
{{#external}}{{#needs_proxy}}proxy__{{/needs_proxy}}{{#staticmethod}}static__{{/staticmethod}}{{interfaces.name}}__{{name}}{{/external}}{{\}}
{{^external}}&{{interfaces.name}}::{{name}}{{/external}}{{\}}
		    )
{{#staticmethod}}
		    .staticmethod("{{name}}")
{{/staticmethod}}
{{/operations}}
			.def("clone", internal__{{name}}__clone)
{{#has_to_string}}
			.def(str(self))
{{/has_to_string}}
		    ;
{{#is_translatable}}

		translatable_<{{name}}>("translatable_{{name}}").def_tr();
{{/is_translatable}}
{{#is_vector}}

		vector_<{{name}}>("vector_{{name}}").def_vector();
{{/is_vector}}
{{/synthetic}}
{{/interfaces}}
	}
}  // namespace movies::v{{version}}
