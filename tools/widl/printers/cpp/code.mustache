// Copyright (c) 2023 midnightBITS
// This code is licensed under MIT license (see LICENSE for details)

// THIS FILE IS AUTOGENERATED. DO NOT MODIFY

#include {{header}}
#include "movie_info/impl.hpp"

namespace movies::v{{version}} {
{{# enums}}
	template <>
	struct enum_traits<{{name}}> : public enum_traits_helper<enum_traits<{{name}}>, {{name}}> {
		using helper = enum_traits_helper<enum_traits<{{name}}>, {{name}}>;
		using name_type = helper::name_type;
		static std::span<name_type const> names() noexcept {
			static constexpr name_type enum_names[] = {
#define X_NAME(NAME) { u8 ## #NAME ## sv, {{name}}::NAME },
				{{NAME}}_X(X_NAME)
#undef X_NAME
			};
			return {std::data(enum_names), std::size(enum_names)};
		}
	};

{{/ enums}}
{{# interfaces}}
{{? add_serdes}}
	json::node {{name}}::to_json() const {
		json::map result{};
{{# attributes}}
		v{{version}}::{{op_store}}(result, u8"{{name}}", {{name}});
{{/ attributes}}
		if (result.empty()) return {};
		return result;
	}

	json::conv_result {{name}}::from_json(json::map const& data,
	                  {{spcs}}            std::string& dbg) {
		auto result = json::conv_result::ok;
{{# attributes}}
{{# ext_attrs.load_as}}
		OP({{ext_attrs.load_as}});
{{/ ext_attrs.load_as}}
{{^ ext_attrs.load_as}}
		OP(v{{version}}::{{op_load}}(data, u8"{{name}}", {{name}}, dbg));
{{/ ext_attrs.load_as}}
{{/ attributes}}
{{? ext_attrs.load_postproc}}
		OP(load_postproc(dbg));
{{/ ext_attrs.load_postproc}}
		return result;
	}

{{/ add_serdes}}
{{? add_merge}}
	json::conv_result {{name}}::merge({{name}} const& new_data{{\}}
		{{#merge_with}}, {{type}} {{name}}{{/merge_with}}{{\}}
	) {
		auto result = json::conv_result::ok;
{{# attributes}}
		OP(v{{version}}::merge({{name}}, new_data.{{name}}{{\}}
			{{#merge_with}}, {{name}}{{/merge_with}}{{\}}
			{{#ext_attrs}}{{#merge_with}}, {{merge_with}}{{/merge_with}}{{/ext_attrs}}{{\}}
		));
{{/ attributes}}
{{? ext_attrs.merge_postproc}}
		OP(merge_postproc(dbg));
{{/ ext_attrs.merge_postproc}}
		return result;
	}

{{/ add_merge}}
{{/ interfaces}}
} // namespace movies::v{{version}}
