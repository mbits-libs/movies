[merge_with("prefer_title|which_title", "prefer_details|which_details", "image_diff*|image_changes"), load_postproc]
interface movie_info {
    [merge_with="which_details"] attribute unsigned version;
    attribute sequence<string> refs;
    attribute translatable<title_info> title;
    attribute sequence<string> genres;
    attribute sequence<string> countries;
    [or_value] attribute sequence<string> age;
    attribute sequence<string> tags;
    attribute sequence<string> episodes;
    attribute crew_info crew;
    attribute translatable<string> tagline;
    attribute translatable<string> summary;
    attribute image_info image;
    attribute dates_info dates;
    [merge_with="which_details"] attribute unsigned? year;
    [merge_with="which_details"] attribute unsigned? runtime;
    [merge_with="which_details"] attribute unsigned? rating;
    [merge_with="which_details"] attribute media_kind media_type;
    [merge_with="which_details"] attribute unsigned? season_no;
    [merge_with="which_details"] attribute unsigned? episode_no;
    attribute video_info video;

    [throws, mutable] void add_tag(string_view tag);
    [throws, mutable] void remove_tag(string_view tag);
    bool has_tag(string_view tag);
};

[from=none, merge=none]
interface image_diff {};

[from=node, merge=manual, merge_with("prefer_title|which_title"), load_postproc, merge_postproc]
interface title_info {
    attribute string text;
    attribute string? sort;
    attribute bool original;
};

[merge=manual, load_postproc]
interface crew_info {
    attribute sequence<role_info> directors;
    attribute sequence<role_info> writers;
    attribute sequence<role_info> cast;
    attribute sequence<person_name> names;
};

[from=node, merge=none, spaceship]
interface role_info {
    attribute long long id;
    attribute string? contribution;
};

[from=node, merge=none, spaceship]
interface person_name {
    attribute string name;
    attribute sequence<string> refs;
};

[merge=manual, merge_with("image_diff*|image_changes")]
interface image_info {
    attribute translatable<image_url> highlight;
    attribute translatable<poster_info> poster;
    attribute sequence<image_url> gallery;
};

[merge=manual]
interface poster_info {
    attribute image_url? small;
    attribute image_url? large;
    attribute image_url? normal;
};

[from=node, merge=manual, spaceship]
interface image_url {
    attribute string path;
    attribute string? url;
};

interface dates_info {
    attribute timestamp? published;
    attribute timestamp? stream;
    attribute timestamp? poster;
    [static, throws] timestamp? from_http_date([in] ascii header);
};

interface video_info {
    attribute uint32_t? credits;
    attribute uint32_t? end_of_watch;
    attribute sequence<video_marker> markers;
};

[merge(none), spaceship]
interface video_marker {
    [empty(allow)] attribute uint32_t start;
    attribute uint32_t? stop;
    attribute string? comment;
    [default="marker_type::bookmark"] attribute marker_type type;
};

[nonjson, cpp_quote("using callback = std::function<void(movies_config&, std::filesystem::path const&, json::node const&)>;")]
interface movies_config {
	attribute string title;
	attribute db_type adult;
	attribute movies_dirs dirs;
};

[nonjson]
interface movies_dirs {
	attribute path infos;
	attribute path images;
	attribute path videos;
};

[nonjson]
interface loaded_movie : movie_info {
	attribute file_ref? video_file;
	attribute file_ref? info_file;
};

[nonjson]
interface file_ref {
	attribute string id;
	attribute timestamp mtime;
};

enum prefer_title { "mine", "theirs" };

enum prefer_details { "mine", "theirs" };

enum media_kind { "movie", "part", "short_film", "collection", "series", "miniseries", "season", "episode" };

enum marker_type {
	"bookmark",
	"recap",
	"credits",
	"credits_scene",
	"chapter",
};

enum db_type {
	"mixed", "safe", "unsafe"
};
